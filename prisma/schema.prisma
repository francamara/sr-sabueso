generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Account {
  id                  Int     @id @default(autoincrement())
  type                String
  provider            String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  provider_account_id String
  user_id             Int
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Session {
  id            Int      @id @default(autoincrement())
  expires       DateTime
  session_token String   @unique
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  phone_number    String?         @unique
  role_id         Int
  password        String?
  created_at      DateTime        @default(now())
  email           String?         @unique
  email_verified  DateTime?
  accounts        Account[]
  orders          Order[]
  sessions        Session[]
  stock_movements StockMovement[]
  role            Role            @relation(fields: [role_id], references: [id])
  addresses       UserAddress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  user_id    Int
  address    String
  created_at DateTime @default(now())
  orders     Order[]
  user       User     @relation(fields: [user_id], references: [id])
}

model Animal {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Brand {
  id            Int           @id @default(autoincrement())
  name          String
  products      Product[]
  product_lines ProductLine[]
}

model ProductLine {
  id                Int              @id @default(autoincrement())
  name              String
  brand_id          Int
  products          Product[]
  brand             Brand            @relation(fields: [brand_id], references: [id])
  sub_product_lines SubProductLine[]
}

model SubProductLine {
  id              Int         @id @default(autoincrement())
  name            String
  product_line_id Int         @default(1)
  products        Product[]
  product_line    ProductLine @relation(fields: [product_line_id], references: [id])
}

model AnimalAge {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model AnimalSize {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] @relation("AnimalSizeToProduct")
}

model Product {
  id                  Int             @id @default(autoincrement())
  brand_id            Int
  animal_id           Int
  animal_age_id       Int
  description         String
  sku                 String          @unique
  barcode             String          @unique
  stock               Int
  retail_price        Float
  wholesale_price     Float
  weight              Float
  extra_weight        Float
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  is_deleted          Boolean         @default(false)
  product_line_id     Int             @default(1)
  sub_product_line_id Int?
  order_items         OrderItem[]
  price_history       PriceHistory[]
  animal_age          AnimalAge       @relation(fields: [animal_age_id], references: [id])
  animal              Animal          @relation(fields: [animal_id], references: [id])
  brand               Brand           @relation(fields: [brand_id], references: [id])
  product_line        ProductLine     @relation(fields: [product_line_id], references: [id])
  sub_product_line    SubProductLine? @relation(fields: [sub_product_line_id], references: [id])
  product_images      ProductImage[]
  stock_movements     StockMovement[]
  animal_sizes        AnimalSize[]    @relation("AnimalSizeToProduct")
}

model Distributor {
  id            Int            @id @default(autoincrement())
  name          String
  price_history PriceHistory[]
}

model PriceType {
  id            Int            @id @default(autoincrement())
  name          String
  price_history PriceHistory[]
}

model PriceHistory {
  id             Int         @id @default(autoincrement())
  product_id     Int
  distributor_id Int
  price_type_id  Int
  price          Float
  changed_at     DateTime    @default(now())
  is_deleted     Boolean     @default(false)
  distributor    Distributor @relation(fields: [distributor_id], references: [id])
  price_type     PriceType   @relation(fields: [price_type_id], references: [id])
  product        Product     @relation(fields: [product_id], references: [id])
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  product_id Int
  url        String
  alt_text   String
  created_at DateTime @default(now())
  product    Product  @relation(fields: [product_id], references: [id])
}

model OrderStatus {
  id     Int     @id @default(autoincrement())
  name   String
  orders Order[]
}

model Order {
  id              Int         @id @default(autoincrement())
  user_id         Int
  address_id      Int
  order_status_id Int
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  delivery        Delivery?
  address         UserAddress @relation(fields: [address_id], references: [id])
  status          OrderStatus @relation(fields: [order_status_id], references: [id])
  user            User        @relation(fields: [user_id], references: [id])
  order_items     OrderItem[]
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Float
  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])
}

model Delivery {
  id           Int      @id @default(autoincrement())
  order_id     Int      @unique
  delivered_at DateTime
  status       String
  notes        String
  order        Order    @relation(fields: [order_id], references: [id])
}

model MovementType {
  id              Int             @id @default(autoincrement())
  name            String
  stock_movements StockMovement[]
}

model StockMovement {
  id               Int          @id @default(autoincrement())
  product_id       Int
  user_id          Int
  movement_type_id Int
  change           Int
  reference_id     Int
  created_at       DateTime     @default(now())
  movement_type    MovementType @relation(fields: [movement_type_id], references: [id])
  product          Product      @relation(fields: [product_id], references: [id])
  user             User         @relation(fields: [user_id], references: [id])
}
